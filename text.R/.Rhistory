############fonction#############
fdemo<-function(Ss=0.6,Sh=Ss,Sm=Ss,Rs=6,Rh=Rs,Rm=6,sexeR=0.5,ng=100,k=1000,ns=49,nh=0,nm=1,leg=T,titre=NA){
##effectifs initiaux
nsi<-ns
nhi<-nh
nmi<-nm
ni<-nsi+nhi+nmi
##on repete le vecteur de parametres sur la dur?e de la simulation.
Ss0<-rep(Ss,1+ng/length(Ss))[1:ng]
Sh0<-rep(Sh,1+ng/length(Sh))[1:ng]
Sm0<-rep(Sm,1+ng/length(Sm))[1:ng]
Rs0<-rep(Rs,1+ng/length(Rs))[1:ng]
Rh0<-rep(Rh,1+ng/length(Rh))[1:ng]
Rm0<-rep(Rm,1+ng/length(Rm))[1:ng]
for (i in 1:ng){
##le cycle commence par la production
##chez les femelles d'oeuf non f?cond?s qui peut etre plus
##ou moins reussie suivant les ph?notypes
##et qui est alteree quand la densite totale augmente
nosi<-Rs0[i]*(1-ni/k)*nsi*sexeR
nohi<-Rh0[i]*(1-ni/k)*nhi*sexeR
nomi<-Rm0[i]*(1-ni/k)*nmi*sexeR
##effectif des oeufs produits
noi<-nosi+nohi+nomi
##le cycle de vie se poursuit par une f?condation
##sous l'hypothese d'hardy-weinberg (alleatoire)
##nous pouvons donc calculer les proportions de chaque phenotype
##de la nouvelle generation en fonction des frequences alleliques
##observees chez les parents
fm<-(nmi+nhi/2)/ni
##homozygote sauvage N*p^2
ngsi<-noi*(1-fm)^2
##heterozygote N*2pq
nghi<-noi*2*(1-fm)*fm
##homozygote mutant N*q^2
ngmi<-noi*fm^2
##nouveaux effectifs apres eclosion
nsi=nsi+ngsi
nhi=nhi+nghi
nmi=nmi+ngmi
##le cycle de vie s'acheve par une survie qui peut etre
#differente suivant les phenotypes
nsi=Ss0[i]*nsi
nhi=Sh0[i]*nhi
nmi=Sm0[i]*nmi
ni=nsi+nhi+nmi
##on stock ces effectifs dans les vecteurs de resultats
ns[i]<-nsi
nh[i]<-nhi
nm[i]<-nmi
##fin de la boucle
}
##graphique
plot(c(1,ng),c(0,k*1.2),type="n",xlab="Generations",ylab="N",main=titre)
if(leg==T){legend(ng*0.4,k*0.6,c("Sauvage","Heterozygote","Mutant"),pt.cex=0,lty=1,col=c("blue","green","red"),cex=0.8)}
lines(1:ng,nm+nh+ns,col="dark grey",lwd=2)
lines(1:ng,ns,col="blue")
lines(1:ng,nh,col="green")
lines(1:ng,nm,col="red")
abline(h=k,lty=2,col="grey")
}
View(fdemo)
View(fdemo)
x <- c(4, 5, 7, 4, 3, 9)
x*2
y <- x*3+2
plot(x, y)
x <- 6*7
z <- x+2
x
z
1+1
3^2
sqrt(16)
sqrt(-2)
log(-4)
exp(2)
cos(3.141593)
1+1
3^2
sqrt(16)
sqrt(-2)
log(-4)
exp(2)
cos(3.141593)
sqrt(17)
sqrt(9)
log(2)
log(9)
log(3)
exp(4)
sqrt(2)
x <- 6*7
x <- 6*7
z <- x+2
x
z
ylog(z)
#Exercice
y=(log (z))
ls ()
y= (log (z))
ls (z)
ls (y)
plot(x, y)
getwd()
x <- c(4, 5, 7, 4, 3, 9)
x*2
mean(x)
mean(x,na.rm = TRUE)
read.table()
y <- x*3+2
plot(x, y)
y <- x*3+2 + rnorm(x)
hist(rnorm(45))
hist(rnorm(450000))
hist(rnorm(45000000))
y[1]
y[c(1,3)]
y[x<20]
load("C:/Users/GHISLAINE KOSSONOU/Desktop/4A ISARA/Module E OPEN/R_Module_1/casino.csv")
install.packages("dplyr")
library("dplyr")
library(dplyr)
#
install.packages("dplyr")
#
install.packages("dplyr")
install.packages("dplyr")
#install.packages("dplyr")
library(dplyr)
filter(casino, Couleur_voiture=="bleu")
filter(casino, Couleur_voiture=="bleu")
casino <- read.csv2("casino.csv", row.names = 1)
casino <- read.csv2("casino.csv", row.names = 1)
install.packages('tinytex')
tinytex::install_tinytex()
setwd("C:/Users/GHISLAINE KOSSONOU/Desktop/4A ISARA/Module E OPEN")
###################################################
###  Intro- 1e session
###################################################
x <- 6*7    # On peut stocker un r?sultat dans un objet
x <- 6*7
z <- x+2
x
z
1+1
3^2
sqrt(16)
log(4)
exp(2)
cos(3.141593)
ls()
rm(z)
ls()
z <- x+2
z
setwd("C:/Users/GHISLAINE KOSSONOU/Desktop/4A ISARA/Module D OPEN/text.R")
